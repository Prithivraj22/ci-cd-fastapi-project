name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

# Define variables for reuse
env:
  DOCKER_IMAGE_NAME: prithiv22/fastapi-app
  TAG: latest
  APP_PORT: 8000
  EC2_USER: ec2-user

jobs:
  # ----------------------------------------------------
  # JOB 1: Build & Push Docker Image
  # ----------------------------------------------------
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}
          cache-from: type=gha

      - name: Print image name for next job
        run: echo "Pushed image:${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}"

  # ----------------------------------------------------
  # JOB 2: Deploy to EC2
  # ----------------------------------------------------
  deploy:
    needs: build-and-push # This job only runs after the image is built and pushed
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Deployment started."

            # 1. Pull the new Docker image
            docker pull ${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}

            # 2. Stop and remove the old container (if it exists)
            docker rm -f my-fastapi-app-container || true

            # 3. Run the new container
            docker run -d \
              --rm \
              -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
              --name my-fastapi-app-container \
              ${{ env.DOCKER_IMAGE_NAME }}:${{ env.TAG }}

            echo "Deployment finished. Check public IP on port 8000."
